@page "/countries"
@rendermode InteractiveServer
@using GloboClima.Core.DTOs
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject ApiService ApiService
@inject IJSRuntime JSRuntime

<PageTitle>Países - GloboClima</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-12">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-gradient-primary text-white">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-globe me-3"></i>
                        <h3 class="mb-0">Explorar Países</h3>
                    </div>
                </div>
                
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                            <p class="text-muted mt-3">Carregando países...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            @errorMessage
                        </div>
                        <div class="text-center">
                            <button class="btn btn-primary" @onclick="LoadCountries">
                                <i class="fas fa-redo me-2"></i>
                                Tentar Novamente
                            </button>
                        </div>
                    }
                    else if (countries != null && countries.Any())
                    {
                        <!-- Filtro de busca -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-search"></i>
                                    </span>
                                    <input type="text" class="form-control" @bind="searchTerm" @bind:event="oninput" 
                                           placeholder="Buscar país por nome..." />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <p class="text-muted mb-0 d-flex align-items-center">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Mostrando @filteredCountries.Count() de @countries.Count países
                                </p>
                            </div>
                        </div>

                        <!-- Lista de países -->
                        <div class="row">
                            @foreach (var country in filteredCountries.Take(displayCount))
                            {
                                <div class="col-12 col-md-6 col-lg-4 col-xl-3 mb-4">
                                    <div class="card h-100 border-0 shadow-sm country-card">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center mb-3">
                                                <div class="country-flag me-3">
                                                    @if (!string.IsNullOrEmpty(country.Flag))
                                                    {
                                                        <span style="font-size: 2rem;">@country.Flag</span>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-flag text-muted" style="font-size: 2rem;"></i>
                                                    }
                                                </div>
                                                <div>
                                                    <h5 class="card-title mb-1">@country.Name.Common</h5>
                                                    <small class="text-muted">@country.Region</small>
                                                </div>
                                            </div>
                                            
                                            <div class="country-details">
                                                <div class="detail-item mb-2">
                                                    <i class="fas fa-city text-primary me-2"></i>
                                                    <span>Capital: @(country.Capital != null && country.Capital.Any() ? country.Capital.First() : "N/A")</span>
                                                </div>
                                                <div class="detail-item mb-2">
                                                    <i class="fas fa-users text-success me-2"></i>
                                                    <span>População: @FormatPopulation(country.Population)</span>
                                                </div>
                                                <div class="detail-item mb-2">
                                                    <i class="fas fa-expand-arrows-alt text-warning me-2"></i>
                                                    <span>Área: @FormatArea(country.Area)</span>
                                                </div>
                                                @if (country.Languages != null && country.Languages.Any())
                                                {
                                                    <div class="detail-item mb-2">
                                                        <i class="fas fa-language text-info me-2"></i>
                                                        <span>Idiomas: @string.Join(", ", country.Languages.Values.Take(2))</span>
                                                        @if (country.Languages.Count() > 2)
                                                        {
                                                            <small class="text-muted">+@(country.Languages.Count() - 2)</small>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                            
                                            <div class="mt-3">
                                                <button class="btn btn-outline-primary btn-sm w-100" 
                                                        @onclick="async () => await ViewCountryDetails(country)">
                                                    <i class="fas fa-eye me-1"></i>
                                                    Ver Detalhes
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Botão carregar mais -->
                        @if (filteredCountries.Count() > displayCount)
                        {
                            <div class="text-center mt-4">
                                <button class="btn btn-outline-primary" @onclick="LoadMore" disabled="@isLoadingMore">
                                    @if (isLoadingMore)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Carregando...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-plus me-2"></i>
                                        <span>Carregar Mais (@(filteredCountries.Count() - displayCount) restantes)</span>
                                    }
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-globe text-muted mb-3" style="font-size: 3rem;"></i>
                            <h4 class="text-muted">Nenhum País Encontrado</h4>
                            <p class="text-muted mb-4">Não foi possível carregar a lista de países.</p>
                            <button class="btn btn-primary" @onclick="LoadCountries">
                                <i class="fas fa-redo me-2"></i>
                                Tentar Novamente
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<CountryResponse>? countries;
    private string searchTerm = string.Empty;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private int displayCount = 20;
    private bool isLoadingMore = false;

    private IEnumerable<CountryResponse> filteredCountries => 
        countries?.Where(c => string.IsNullOrEmpty(searchTerm) || 
                             c.Name.Common.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                             (c.Capital != null && c.Capital.Any() && c.Capital.First().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                             c.Region.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ?? 
        Enumerable.Empty<CountryResponse>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCountries();
    }

    private async Task LoadCountries()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            countries = await ApiService.GetCountriesAsync();
            
            if (countries == null || !countries.Any())
            {
                errorMessage = "Nenhum país foi encontrado.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Erro ao carregar países. Verifique sua conexão e tente novamente.";
            Console.WriteLine($"Erro ao carregar países: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMore()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Botão Carregar Mais clicado!");
            await JSRuntime.InvokeVoidAsync("alert", $"Carregando mais países... Atualmente mostrando {displayCount}");
            
            isLoadingMore = true;
            StateHasChanged();
            
            // Simula um pequeno delay para mostrar o loading
            await Task.Delay(500);
            
            int oldCount = displayCount;
            displayCount += 20;
            
            await JSRuntime.InvokeVoidAsync("console.log", $"Paginação atualizada de {oldCount} para {displayCount}");
            
            isLoadingMore = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Erro no LoadMore: {ex.Message}");
            isLoadingMore = false;
            StateHasChanged();
        }
    }

    private async Task ViewCountryDetails(CountryResponse country)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Botão Ver Detalhes clicado para: {country.Name.Common}");
            await JSRuntime.InvokeVoidAsync("alert", $"Carregando detalhes de {country.Name.Common}...");
            
            // Por enquanto, vamos buscar mais detalhes do país
            var detailedCountry = await ApiService.GetCountryByNameAsync(country.Name.Common);
            if (detailedCountry != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Detalhes carregados para {country.Name.Common}!\n\nCapital: {(detailedCountry.Capital?.FirstOrDefault() ?? "N/A")}\nRegião: {detailedCountry.Region}\nPopulação: {detailedCountry.Population:N0}");
                await JSRuntime.InvokeVoidAsync("console.log", "Detalhes carregados com sucesso", detailedCountry);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Não foi possível carregar os detalhes do país.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Erro ao carregar detalhes: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao carregar detalhes: {ex.Message}");
        }
        StateHasChanged();
    }

    private string FormatPopulation(long population)
    {
        if (population >= 1_000_000_000)
            return $"{population / 1_000_000_000.0:F1}B";
        else if (population >= 1_000_000)
            return $"{population / 1_000_000.0:F1}M";
        else if (population >= 1_000)
            return $"{population / 1_000.0:F1}K";
        else
            return population.ToString("N0");
    }

    private string FormatArea(double area)
    {
        if (area >= 1_000_000)
            return $"{area / 1_000_000.0:F1}M km²";
        else if (area >= 1_000)
            return $"{area / 1_000.0:F1}K km²";
        else
            return $"{area:F0} km²";
    }
}

<style>
    .country-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }
    
    .country-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }
    
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .detail-item {
        font-size: 0.9rem;
        display: flex;
        align-items: center;
    }
    
    .country-flag {
        min-width: 60px;
        text-align: center;
    }
</style>
